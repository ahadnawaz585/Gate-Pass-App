generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  pending
  approved
  cancelled
}

enum ParentType {
  Role
  User
  Group
}

enum EmployeeStatus {
  ACTIVE
  RESIGNED
  REJOINED
}

model Customer {
  id         String     @id @default(uuid())
  name       String
  email      String?
  phone      String?
  address    String?
  gatePasses GatePass[]
  createdAt  DateTime?
  updatedAt  DateTime?
  isDeleted  DateTime?
}

model Item {
  id          String         @id @default(uuid())
  name        String
  description String?
  quantity    Int?
  unitPrice   Float?
  gatePasses  GatePassItem[]
  createdAt   DateTime?
  updatedAt   DateTime?
  isDeleted   DateTime?
}

model GatePass {
  id            String         @id @default(uuid())
  customerId    String
  status        Status         @default(pending)
  notes         String?
  location      String
  vehicleNo     String
  storeIncharge String
  createdAt     DateTime?
  updatedAt     DateTime?
  isDeleted     DateTime?
  issuedAt      DateTime?      @default(now())
  validUntil    DateTime?
  items         GatePassItem[]
  customer      Customer       @relation(fields: [customerId], references: [id])
}

model GatePassItem {
  id         String    @id @default(uuid())
  gatePassId String
  itemId     String
  quantity   Int
  serialNos  String[]
  createdAt  DateTime?
  updatedAt  DateTime?
  isDeleted  DateTime?
  item       Item      @relation(fields: [itemId], references: [id])
  gatePass   GatePass  @relation(fields: [gatePassId], references: [id])
}

model User {
  id        String    @id @default(uuid()) @db.VarChar(36)
  username  String    @unique @db.VarChar(256)
  password  String    @db.VarChar(256)
  createdAt DateTime?
  updatedAt DateTime?
  isDeleted DateTime?

  userGroups      UserGroup[]
  blacklistTokens BlacklistToken[]
  loggedInUsers   LoggedInUsers[]
  userRoles       UserRole[]
  employee        Employee?        @relation(fields: [employeeId], references: [id])
  employeeId      String?          @unique
}

model Group {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @unique @db.VarChar(256)
  readAccess  Json?     @db.JsonB
  writeAccess Json?     @db.JsonB
  createdAt   DateTime?
  updatedAt   DateTime?
  isDeleted   DateTime?

  userGroups UserGroup[]
  groupRoles GroupRole[]
}

model UserGroup {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @db.VarChar(36)
  groupId   String    @db.VarChar(36)
  active    Boolean
  createdAt DateTime?
  updatedAt DateTime?
  isDeleted DateTime?

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Role {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @unique
  readAccess  Json?     @db.JsonB
  writeAccess Json?     @db.JsonB
  createdAt   DateTime?
  updatedAt   DateTime?
  isDeleted   DateTime?

  userRoles  UserRole[]
  groupRoles GroupRole[]
}

model UserRole {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @db.VarChar(36)
  roleId    String    @db.VarChar(36)
  active    Boolean
  createdAt DateTime?
  updatedAt DateTime?
  isDeleted DateTime?

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model GroupRole {
  id        String    @id @default(uuid()) @db.VarChar(36)
  groupId   String    @db.VarChar(36)
  roleId    String    @db.VarChar(36)
  active    Boolean
  createdAt DateTime?
  updatedAt DateTime?
  isDeleted DateTime?

  group Group @relation(fields: [groupId], references: [id])
  role  Role  @relation(fields: [roleId], references: [id])

  @@unique([groupId, roleId])
}

model AppFeature {
  name            String       @id @db.VarChar(256)
  parentFeatureId String?      @db.VarChar(256)
  label           String
  parentFeature   AppFeature?  @relation("ParentChild", fields: [parentFeatureId], references: [name])
  children        AppFeature[] @relation("ParentChild")
  createdAt       DateTime?
  updatedAt       DateTime?
  isDeleted       DateTime?
}

model FeaturePermission {
  id          String     @id @default(uuid()) @db.VarChar(36)
  parentType  ParentType
  parentId    String     @db.VarChar(36)
  permissions Json       @db.JsonB
  createdAt   DateTime?
  updatedAt   DateTime?
  isDeleted   DateTime?
}

model BlacklistToken {
  id         String    @id @default(uuid()) @db.VarChar(36)
  token      String    @unique
  rememberMe Boolean
  userId     String    @db.VarChar(36)
  createdAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model LoggedInUsers {
  id         String    @id @default(uuid()) @db.VarChar(36)
  token      String    @unique
  userId     String    @db.VarChar(36)
  rememberMe Boolean
  createdAt  DateTime?
  user       User      @relation(fields: [userId], references: [id])
}

model Employee {
  id                 String         @id @default(uuid()) @db.VarChar(36)
  name               String
  surname            String
  address            String
  dob                DateTime
  cnic               String         @default("")
  joiningDate        DateTime
  bloodGroup         String
  contactNo          String
  emergencyContactNo String?
  faceDescriptor     Json?          @db.JsonB
  designation        String
  department         String
  martialStatus      String
  noOfChildrens      Int?
  filePaths          String[]       @default([])
  status             EmployeeStatus @default(ACTIVE)
  resignationDate    DateTime?

  company   Company
  image     String?
  code      String    @unique
  createdAt DateTime?
  updatedAt DateTime?
  isDeleted DateTime?

  user              User?
  attendances       Attendance[]
  leaveRequests     LeaveRequest[]
  attendanceRequests AttendanceRequest[]
  leaveAllocation   LeaveAllocation[]
  shiftAssignments  ShiftAssignment[]
  todos             Todo[]
}

enum Company {
  SOLARMAX
  POWERHIGHWAY
  OKASHASMART
}

model Attendance {
  id         String           @id @default(uuid()) @db.VarChar(36)
  employee   Employee         @relation(fields: [employeeId], references: [id])
  employeeId String
  date       DateTime
  status     AttendanceStatus
  comment    String?
  checkIn    DateTime?
  checkOut   DateTime?
  location   String?
  createdAt  DateTime?
  updatedAt  DateTime?
  isDeleted  DateTime?
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
  HALF_DAY
  HOLIDAYS
}

model LeaveRequest {
  id         String      @id @default(uuid()) @db.VarChar(36)
  employee   Employee    @relation(fields: [employeeId], references: [id])
  employeeId String
  reason     String?
  startDate  DateTime
  endDate    DateTime
  status     LeaveStatus @default(PENDING)
  image      String?
  location   String?
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  isDeleted  DateTime?
}

model AttendanceRequest {
  id         String      @id @default(uuid()) @db.VarChar(36)
  employee   Employee    @relation(fields: [employeeId], references: [id])
  employeeId String
  reason     String?
  status     LeaveStatus @default(PENDING)
  image      String? 
  location   String? 
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  isDeleted  DateTime?
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model LeaveConfiguration {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @unique
  description String?
  maxDays     Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  isDeleted   DateTime?

  employees LeaveAllocation[]
}

model LeaveAllocation {
  id                  String              @id @default(uuid()) @db.VarChar(36)
  employee            Employee            @relation(fields: [employeeId], references: [id])
  employeeId          String
  leaveConfig         LeaveConfiguration? @relation(fields: [leaveConfigId], references: [id])
  leaveConfigId       String?
  assignedDays        Int
  note                String?
  allocationStartDate DateTime
  allocationEndDate   DateTime?
  createdAt           DateTime?           @default(now())
  updatedAt           DateTime?           @updatedAt
  isDeleted           DateTime?
}

enum ScheduleParent {
  LEAVE
  ABSENT
  CHECK_OUT
}

enum ScheduleStatus {
  SUCCESS
  FAIL
  SKIP
}

model AttendanceScheduler {
  id          String         @id @default(uuid()) @db.VarChar(36)
  parent      ScheduleParent
  runTime     DateTime
  status      ScheduleStatus
  employeeIds String[]
  log         String?
  createdAt   DateTime?
  updatedAt   DateTime?
  isDeleted   DateTime?
}

model Shift {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @unique
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  isDeleted   DateTime?

  assignments ShiftAssignment[]
}

model ShiftAssignment {
  id         String    @id @default(uuid()) @db.VarChar(36)
  employeeId String
  shiftId    String
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  isDeleted  DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
  shift    Shift    @relation(fields: [shiftId], references: [id])

  @@unique([employeeId, shiftId, startDate])
}

model Todo {
  id          String    @id @default(uuid()) @db.VarChar(36)
  employeeId  String
  title       String
  description String?
  dueDate     DateTime?
  status      TodoStatus @default(PENDING)
  priority    TodoPriority @default(MEDIUM)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  isDeleted   DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
}